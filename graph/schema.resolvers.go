package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"blog-graphql/db"
	"blog-graphql/graph/model"
	service "blog-graphql/services/jwt"
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"golang.org/x/crypto/bcrypt"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, name string) (*model.Category, error) {
	category := model.Category{ID: uuid.NewString(), Name: name}

	result := db.DB.Create(&category)
	err := result.Error
	if err != nil {
		return nil, err
	}
	return &category, nil
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, _id string) (*model.Category, error) {
	var category model.Category
	query := db.DB.First(&category, "id = ?", _id)
	if query.Error != nil {
		return nil, query.Error
	}
	result := db.DB.Delete(model.Category{}, "id = ?", _id)
	if result.Error != nil {
		return nil, result.Error
	}

	return &category, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, _id string, name string) (*model.Category, error) {
	var category model.Category
	query := db.DB.First(&category, "id = ?", _id)
	if query.Error != nil {
		return nil, query.Error
	}
	result := db.DB.Model(&category).Update("name", name)
	if result.Error != nil {
		return nil, result.Error
	}
	return &category, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, password string, name string) (*model.User, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14)
	if err != nil {
		return nil, err
	}

	idUser := uuid.NewString()
	user := model.User{ID: idUser, Username: username, Password: string(bytes), Name: name, Credentials: &model.Credentials{ID: uuid.NewString(), UserID: idUser, IsAuthor: false, IsAdmin: false}, Token: ""}

	db.DB.Create(&user)
	return &user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.User, error) {
	var user model.User

	query := db.DB.Where("username = ?", username).First(&user)
	if query.Error != nil {
		return nil, query.Error
	}

	value := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password))

	if value != nil {
		return nil, value
	}

	token, err := service.GenerateToken(user.Username)

	if err != nil {
		return nil, err
	}
	db.DB.Model(&user).Update("token", token)

	return &user, nil
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, username string, oldPassword string, newPassword string) (*bool, error) {
	var user model.User

	query := db.DB.Where("username = ?", username).First(&user)
	if query.Error != nil {
		return nil, query.Error
	}

	value := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(oldPassword))
	if value != nil {
		return nil, value
	}

	newPasswordHashed, err := bcrypt.GenerateFromPassword([]byte(newPassword), 14)
	if err != nil {
		return nil, err
	}

	result := db.DB.Model(&user).Update("password", string(newPasswordHashed))
	if result.Error != nil {
		return nil, result.Error
	}

	bool := true
	return &bool, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, body string, postID string, userID string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id string, body string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title *string, body *string, categoryID *string, userID *string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title *string, body *string, categoryID string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, _id string) (*model.User, error) {
	var user *model.User

	result := db.DB.First(&user, "id = ?", _id)
	if result.Error != nil {
		return nil, result.Error
	}

	return user, nil
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success", nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User

	result := db.DB.Find(&users)
	if result.Error != nil {
		return nil, result.Error
	}

	return users, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, _id string) (*model.Category, error) {
	var category *model.Category

	result := db.DB.First(&category, "id = ?", _id)
	if result.Error != nil {
		return nil, result.Error
	}

	return category, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	var categories []*model.Category

	result := db.DB.Find(&categories)
	if result.Error != nil {
		return nil, result.Error
	}

	return categories, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) JwtValidation(ctx context.Context, token string) (string, error) {
	fmt.Println(token)
	tokenString, err := service.JwtValidate(context.Background(), token)
	if err != nil {
		return "", err
	}

	if tokenString == nil {
		return "", &gqlerror.Error{
			Message: "Access Denied",
		}
	}
	return "success", nil
}
