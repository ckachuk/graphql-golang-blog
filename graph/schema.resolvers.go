package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"blog-graphql/graph/model"
	categoryService "blog-graphql/services/category"
	service "blog-graphql/services/jwt"
	userService "blog-graphql/services/user"
	"context"
	"fmt"

	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, name string) (*model.Category, error) {
	newCategory,error := categoryService.CreateCategoryService(ctx, name)
	if error!=nil{
		return nil, error
	}
	return newCategory,nil
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, _id string) (*model.Category, error) {
	categoryDeleted, error:= categoryService.DeleteCategoryService(ctx, _id)
	if error!=nil{
		return nil, error
	}
	return categoryDeleted, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, _id string, name string) (*model.Category, error) {
	categoryDeleted, error:= categoryService.DeleteCategoryService(ctx, _id)
	if error!=nil{
		return nil, error
	}
	return categoryDeleted, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, password string, name string) (*model.User, error) {
	userCreated, error := userService.CreateUserService(ctx, username, password, name)
	if error!=nil{
		return nil, error
	}
	return userCreated, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.User, error) {
	user, error:= userService.LoginService(ctx, username, password)
	if error!=nil{
		return nil, error
	}
	return user, nil
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, username string, oldPassword string, newPassword string) (*bool, error) {
	user, error := userService.UpdatePasswordService(ctx, username, oldPassword, newPassword)
	bool := false
	if error!=nil{
		return nil, error
	}
	if user!=nil {
		bool = true
	}	
	return &bool, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, body string, postID string, userID string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id string, body string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title *string, body *string, categoryID *string, userID *string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title *string, body *string, categoryID string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, _id string) (*model.User, error) {
	user, error := userService.GetUserService(ctx, _id)
	if error!=nil{
		return nil, error
	}
	return user, nil
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success", nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, error := userService.GetUsersService(ctx)
	if error!=nil{
		return nil, error
	}
	return users, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, _id string) (*model.Category, error) {
	category,error:= categoryService.GetCategoryService(ctx, _id)
	if error!=nil{
		return nil, error
	}
	return category, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories,error:= categoryService.GetCategoriesService(ctx)
	if error!=nil{
		return nil, error
	}

	return categories, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) JwtValidation(ctx context.Context, token string) (string, error) {
	fmt.Println(token)
	tokenString, err := service.JwtValidate(context.Background(), token)
	if err != nil {
		return "", err
	}

	if tokenString == nil {
		return "", &gqlerror.Error{
			Message: "Access Denied",
		}
	}
	return "success", nil
}
